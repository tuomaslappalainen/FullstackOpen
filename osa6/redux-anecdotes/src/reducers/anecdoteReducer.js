import { VOTE_ANECDOTE, ADD_ANECDOTE } from '../actionTypes'

const anecdotesAtStart = [
  'If it hurts, do it more often',
  'Adding manpower to a late software project makes it later!',
  'The first 90 percent of the code accounts for the first 90 percent of the development time...The remaining 10 percent of the code accounts for the other 90 percent of the development time.',
  'Any fool can write code that a computer can understand. Good programmers write code that humans can understand.',
  'Premature optimization is the root of all evil.',
  'Debugging is twice as hard as writing the code in the first place. Therefore, if you write the code as cleverly as possible, you are, by definition, not smart enough to debug it.'
]

const getId = () => (100000 * Math.random()).toFixed(0)

const asObject = (anecdote) => {
  return {
    content: anecdote,
    id: getId(),
    votes: 0
  }
}

const initialState = anecdotesAtStart.map(asObject)

const anecdoteReducer = (state = initialState, action) => {
  switch (action.type) {
    case VOTE_ANECDOTE: {
      const id = action.data.id
      const anecdoteToVote = state.find(a => a.id === id)
      const votedAnecdote = {
        ...anecdoteToVote,
        votes: anecdoteToVote.votes + 1
      }
    
    const newState = state.map(anecdote =>
      anecdote.id !== id ? anecdote : votedAnecdote
    );
    return newState.sort((a, b) => b.votes - a.votes)
  }
  case ADD_ANECDOTE: {
    const newState = [...state, action.data]
    return newState.sort((a, b) => b.votes - a.votes)
    }
    default:
      return state
  }
}
export default anecdoteReducer

// The provided code defines a Redux reducer for managing a list of anecdotes. The reducer handles two types of actions: voting for an anecdote and adding a new anecdote. The action types are imported from a separate file named actionTypes.

// The initial state of the reducer is an array of predefined anecdotes. Each anecdote is converted into an object with three properties: content, id, and votes. The content property holds the anecdote text, the id is a unique identifier generated by the getId function, and votes is initialized to zero.

// The anecdoteReducer function takes the current state and an action as arguments. It uses a switch statement to determine the type of action. For the VOTE_ANECDOTE action, the reducer finds the anecdote to be voted on by its id, increments its votes property, and returns a new state array with the updated anecdote. The anecdotes are then sorted in descending order based on the number of votes.

// For the ADD_ANECDOTE action, the reducer adds the new anecdote (provided in action.data) to the state array and sorts the anecdotes by votes in descending order. If the action type does not match any case, the reducer returns the current state unchanged.

// Finally, the reducer is exported as the default export of the module, making it available for use in other parts of the application.